package ua.training.electriberies.model.dao.impl;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.List;
import java.util.ResourceBundle;

import ua.training.electriberies.model.dao.interfaces.GenericDAO;
import static ua.training.electriberies.model.dao.interfaces.QueryConstants.*;
import ua.training.electriberies.model.entity.users.*;

public class JDBCUserDAO implements GenericDAO<User> {
		
	private static final String QUERY_BUNDLE_NAME = "db_queries";
	private static final String COLUMN_BUNDLE_NAME = "db_columns";
	
	private static ResourceBundle queryBundle;
	private static ResourceBundle columnBundle;
	
	// TODO ??? put constants here: e.g. next line, make resource bundle with static initialize
	// private static final String INSERT = queryBundle.getString(INSERT_USER_QUERY);
	
	private Connection connection;

	public JDBCUserDAO(Connection connection) {
		this.connection = connection;
		this.queryBundle = ResourceBundle.getBundle(QUERY_BUNDLE_NAME);
		this.columnBundle = ResourceBundle.getBundle(COLUMN_BUNDLE_NAME);
	}
	
	/**
	 * @return User
	 * Return statement added to provide testability of this method. 
	 * Method returns the same user was inserted to DB but with userId generated by DB auto increment,
	 * just inserted to DB user is found by login which is unique.
	 *  
	 */
	@Override
	public User create (User user) {
		try(PreparedStatement statement = 
				connection.prepareStatement(queryBundle.getString(INSERT_USER_QUERY))) {
			statement.setString(1, user.getLogin());
			statement.setString(2, user.getPassword());
			statement.setString(3, user.getRole().name());			
			if (statement.executeUpdate() > 0) {
				User newUser = getByLogin(user.getLogin());
				return newUser;
			}
		} catch (SQLException e) {
			throw new RuntimeException(e);
		}
		return null;
	}

	@Override
	public User getById(int id) {
		User user = null;		
		try(PreparedStatement statement = 
				connection.prepareStatement(queryBundle.getString(GET_USER_BY_ID_QUERY))) {
			statement.setInt(1, id);
			ResultSet rs = statement.executeQuery();
			if (rs.next()) {
				user = extractUser(rs);	
			}
		} catch (SQLException e) {
			throw new RuntimeException(e);
		}		
		return user;
	}
	
	private User getByLogin(String login) {
		User user = null;		
		try(PreparedStatement statement = 
				connection.prepareStatement(queryBundle.getString(GET_USER_BY_LOGIN_QUERY))) {
			statement.setString(1, login);
			ResultSet rs = statement.executeQuery();
			if (rs.next()) {
				user = extractUser(rs);	
			}
		} catch (SQLException e) {
			throw new RuntimeException(e);
		}		
		return user;
	}

	private User extractUser(ResultSet rs) throws SQLException {
		int userid = rs.getInt(columnBundle.getString(USER_ID_COLUMN));
		String login = rs.getString(columnBundle.getString(USER_LOGIN_COLUMN));
		String password = rs.getString(columnBundle.getString(USER_PASSWORD_COLUMN));
		String role = rs.getString(columnBundle.getString(USER_ROLE_COLUMN));		
		return new UserImpl(userid, login, password, UserRole.valueOf(role));
	}

	@Override
	public User update(User user) {
		try(PreparedStatement statement = 
				connection.prepareStatement(queryBundle.getString(UPDATE_USER_QUERY))) {
			statement.setString(1, user.getLogin());
			statement.setString(2, user.getPassword());
			statement.setString(3, user.getRole().name());
			statement.setInt(4, user.getId());
			if (statement.executeUpdate() > 0) {
				return user;
			}
		} catch (SQLException e) {
			throw new RuntimeException(e);
		}
		return null;
		
	}

	@Override
	public User delete(User user) {
		try(PreparedStatement statement = 
				connection.prepareStatement(queryBundle.getString(DELETE_USER_QUERY))) {
			statement.setInt(1, user.getId());
			int res = statement.executeUpdate();
			if (res > 0) {
				return user;
			}
		} catch (SQLException e) {
			// TODO Auto-generated catch block
			throw new RuntimeException(e);
		}
		return null;
	}

	@Override
	public List<User> getAll() {
		List<User> users = new ArrayList<>();		
		try(PreparedStatement statement = 
				connection.prepareStatement(queryBundle.getString(GET_ALL_USERS_QUERY))) {
			ResultSet rs = statement.executeQuery();
			while(rs.next()) {
				User user = extractUser(rs);			
				users.add(user);	
			}
		} catch (SQLException e) {
			throw new RuntimeException(e);
		}				
		return users;
	}

	@Override
	public void close() {
		try {
			connection.close();
		} catch (SQLException e) {
			throw new RuntimeException(e);
		}		
	}	

}
